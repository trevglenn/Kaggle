{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fcd650b4",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-05-16T05:35:20.644091Z",
     "iopub.status.busy": "2024-05-16T05:35:20.643481Z",
     "iopub.status.idle": "2024-05-16T05:35:21.739468Z",
     "shell.execute_reply": "2024-05-16T05:35:21.737790Z"
    },
    "papermill": {
     "duration": 1.118148,
     "end_time": "2024-05-16T05:35:21.742379",
     "exception": false,
     "start_time": "2024-05-16T05:35:20.624231",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/playground-series-s4e5/sample_submission.csv\n",
      "/kaggle/input/playground-series-s4e5/train.csv\n",
      "/kaggle/input/playground-series-s4e5/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d9f98f43",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:35:21.779027Z",
     "iopub.status.busy": "2024-05-16T05:35:21.778230Z",
     "iopub.status.idle": "2024-05-16T05:35:24.038197Z",
     "shell.execute_reply": "2024-05-16T05:35:24.036622Z"
    },
    "papermill": {
     "duration": 2.281762,
     "end_time": "2024-05-16T05:35:24.041436",
     "exception": false,
     "start_time": "2024-05-16T05:35:21.759674",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from scipy import stats\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.metrics import r2_score\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "from sklearn.linear_model import Ridge, Lasso, LinearRegression, SGDRegressor\n",
    "from sklearn.svm import LinearSVR\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "from sklearn.ensemble import VotingRegressor, StackingRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6bc4757f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:35:24.079253Z",
     "iopub.status.busy": "2024-05-16T05:35:24.078794Z",
     "iopub.status.idle": "2024-05-16T05:35:28.350854Z",
     "shell.execute_reply": "2024-05-16T05:35:28.349759Z"
    },
    "papermill": {
     "duration": 4.29468,
     "end_time": "2024-05-16T05:35:28.353664",
     "exception": false,
     "start_time": "2024-05-16T05:35:24.058984",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_df = pd.read_csv(\"/kaggle/input/playground-series-s4e5/train.csv\")\n",
    "test_df = pd.read_csv(\"/kaggle/input/playground-series-s4e5/test.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7982cfb1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:35:28.389676Z",
     "iopub.status.busy": "2024-05-16T05:35:28.389279Z",
     "iopub.status.idle": "2024-05-16T05:35:28.433472Z",
     "shell.execute_reply": "2024-05-16T05:35:28.432197Z"
    },
    "papermill": {
     "duration": 0.065564,
     "end_time": "2024-05-16T05:35:28.436581",
     "exception": false,
     "start_time": "2024-05-16T05:35:28.371017",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>MonsoonIntensity</th>\n",
       "      <th>TopographyDrainage</th>\n",
       "      <th>RiverManagement</th>\n",
       "      <th>Deforestation</th>\n",
       "      <th>Urbanization</th>\n",
       "      <th>ClimateChange</th>\n",
       "      <th>DamsQuality</th>\n",
       "      <th>Siltation</th>\n",
       "      <th>AgriculturalPractices</th>\n",
       "      <th>...</th>\n",
       "      <th>DrainageSystems</th>\n",
       "      <th>CoastalVulnerability</th>\n",
       "      <th>Landslides</th>\n",
       "      <th>Watersheds</th>\n",
       "      <th>DeterioratingInfrastructure</th>\n",
       "      <th>PopulationScore</th>\n",
       "      <th>WetlandLoss</th>\n",
       "      <th>InadequatePlanning</th>\n",
       "      <th>PoliticalFactors</th>\n",
       "      <th>FloodProbability</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>0.445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0.450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0.530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>0.535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>0.415</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   id  MonsoonIntensity  TopographyDrainage  RiverManagement  Deforestation  \\\n",
       "0   0                 5                   8                5              8   \n",
       "1   1                 6                   7                4              4   \n",
       "2   2                 6                   5                6              7   \n",
       "3   3                 3                   4                6              5   \n",
       "4   4                 5                   3                2              6   \n",
       "\n",
       "   Urbanization  ClimateChange  DamsQuality  Siltation  AgriculturalPractices  \\\n",
       "0             6              4            4          3                      3   \n",
       "1             8              8            3          5                      4   \n",
       "2             3              7            1          5                      4   \n",
       "3             4              8            4          7                      6   \n",
       "4             4              4            3          3                      3   \n",
       "\n",
       "   ...  DrainageSystems  CoastalVulnerability  Landslides  Watersheds  \\\n",
       "0  ...                5                     3           3           5   \n",
       "1  ...                7                     2           0           3   \n",
       "2  ...                7                     3           7           5   \n",
       "3  ...                2                     4           7           4   \n",
       "4  ...                2                     2           6           6   \n",
       "\n",
       "   DeterioratingInfrastructure  PopulationScore  WetlandLoss  \\\n",
       "0                            4                7            5   \n",
       "1                            5                3            3   \n",
       "2                            6                8            2   \n",
       "3                            4                6            5   \n",
       "4                            4                1            2   \n",
       "\n",
       "   InadequatePlanning  PoliticalFactors  FloodProbability  \n",
       "0                   7                 3             0.445  \n",
       "1                   4                 3             0.450  \n",
       "2                   3                 3             0.530  \n",
       "3                   7                 5             0.535  \n",
       "4                   3                 5             0.415  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c3637c33",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:35:28.473881Z",
     "iopub.status.busy": "2024-05-16T05:35:28.473476Z",
     "iopub.status.idle": "2024-05-16T05:35:28.533287Z",
     "shell.execute_reply": "2024-05-16T05:35:28.530579Z"
    },
    "papermill": {
     "duration": 0.082085,
     "end_time": "2024-05-16T05:35:28.536539",
     "exception": false,
     "start_time": "2024-05-16T05:35:28.454454",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1117957 entries, 0 to 1117956\n",
      "Data columns (total 22 columns):\n",
      " #   Column                           Non-Null Count    Dtype  \n",
      "---  ------                           --------------    -----  \n",
      " 0   id                               1117957 non-null  int64  \n",
      " 1   MonsoonIntensity                 1117957 non-null  int64  \n",
      " 2   TopographyDrainage               1117957 non-null  int64  \n",
      " 3   RiverManagement                  1117957 non-null  int64  \n",
      " 4   Deforestation                    1117957 non-null  int64  \n",
      " 5   Urbanization                     1117957 non-null  int64  \n",
      " 6   ClimateChange                    1117957 non-null  int64  \n",
      " 7   DamsQuality                      1117957 non-null  int64  \n",
      " 8   Siltation                        1117957 non-null  int64  \n",
      " 9   AgriculturalPractices            1117957 non-null  int64  \n",
      " 10  Encroachments                    1117957 non-null  int64  \n",
      " 11  IneffectiveDisasterPreparedness  1117957 non-null  int64  \n",
      " 12  DrainageSystems                  1117957 non-null  int64  \n",
      " 13  CoastalVulnerability             1117957 non-null  int64  \n",
      " 14  Landslides                       1117957 non-null  int64  \n",
      " 15  Watersheds                       1117957 non-null  int64  \n",
      " 16  DeterioratingInfrastructure      1117957 non-null  int64  \n",
      " 17  PopulationScore                  1117957 non-null  int64  \n",
      " 18  WetlandLoss                      1117957 non-null  int64  \n",
      " 19  InadequatePlanning               1117957 non-null  int64  \n",
      " 20  PoliticalFactors                 1117957 non-null  int64  \n",
      " 21  FloodProbability                 1117957 non-null  float64\n",
      "dtypes: float64(1), int64(21)\n",
      "memory usage: 187.6 MB\n"
     ]
    }
   ],
   "source": [
    "train_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "10f695b4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:35:28.574525Z",
     "iopub.status.busy": "2024-05-16T05:35:28.574100Z",
     "iopub.status.idle": "2024-05-16T05:35:29.453548Z",
     "shell.execute_reply": "2024-05-16T05:35:29.452278Z"
    },
    "papermill": {
     "duration": 0.901142,
     "end_time": "2024-05-16T05:35:29.456360",
     "exception": false,
     "start_time": "2024-05-16T05:35:28.555218",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>MonsoonIntensity</th>\n",
       "      <th>TopographyDrainage</th>\n",
       "      <th>RiverManagement</th>\n",
       "      <th>Deforestation</th>\n",
       "      <th>Urbanization</th>\n",
       "      <th>ClimateChange</th>\n",
       "      <th>DamsQuality</th>\n",
       "      <th>Siltation</th>\n",
       "      <th>AgriculturalPractices</th>\n",
       "      <th>...</th>\n",
       "      <th>DrainageSystems</th>\n",
       "      <th>CoastalVulnerability</th>\n",
       "      <th>Landslides</th>\n",
       "      <th>Watersheds</th>\n",
       "      <th>DeterioratingInfrastructure</th>\n",
       "      <th>PopulationScore</th>\n",
       "      <th>WetlandLoss</th>\n",
       "      <th>InadequatePlanning</th>\n",
       "      <th>PoliticalFactors</th>\n",
       "      <th>FloodProbability</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.117957e+06</td>\n",
       "      <td>1.117957e+06</td>\n",
       "      <td>1.117957e+06</td>\n",
       "      <td>1.117957e+06</td>\n",
       "      <td>1.117957e+06</td>\n",
       "      <td>1.117957e+06</td>\n",
       "      <td>1.117957e+06</td>\n",
       "      <td>1.117957e+06</td>\n",
       "      <td>1.117957e+06</td>\n",
       "      <td>1.117957e+06</td>\n",
       "      <td>...</td>\n",
       "      <td>1.117957e+06</td>\n",
       "      <td>1.117957e+06</td>\n",
       "      <td>1.117957e+06</td>\n",
       "      <td>1.117957e+06</td>\n",
       "      <td>1.117957e+06</td>\n",
       "      <td>1.117957e+06</td>\n",
       "      <td>1.117957e+06</td>\n",
       "      <td>1.117957e+06</td>\n",
       "      <td>1.117957e+06</td>\n",
       "      <td>1.117957e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5.589780e+05</td>\n",
       "      <td>4.921450e+00</td>\n",
       "      <td>4.926671e+00</td>\n",
       "      <td>4.955322e+00</td>\n",
       "      <td>4.942240e+00</td>\n",
       "      <td>4.942517e+00</td>\n",
       "      <td>4.934093e+00</td>\n",
       "      <td>4.955878e+00</td>\n",
       "      <td>4.927791e+00</td>\n",
       "      <td>4.942619e+00</td>\n",
       "      <td>...</td>\n",
       "      <td>4.946893e+00</td>\n",
       "      <td>4.953999e+00</td>\n",
       "      <td>4.931376e+00</td>\n",
       "      <td>4.929032e+00</td>\n",
       "      <td>4.925907e+00</td>\n",
       "      <td>4.927520e+00</td>\n",
       "      <td>4.950859e+00</td>\n",
       "      <td>4.940587e+00</td>\n",
       "      <td>4.939004e+00</td>\n",
       "      <td>5.044803e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.227265e+05</td>\n",
       "      <td>2.056387e+00</td>\n",
       "      <td>2.093879e+00</td>\n",
       "      <td>2.072186e+00</td>\n",
       "      <td>2.051689e+00</td>\n",
       "      <td>2.083391e+00</td>\n",
       "      <td>2.057742e+00</td>\n",
       "      <td>2.083063e+00</td>\n",
       "      <td>2.065992e+00</td>\n",
       "      <td>2.068545e+00</td>\n",
       "      <td>...</td>\n",
       "      <td>2.072333e+00</td>\n",
       "      <td>2.088899e+00</td>\n",
       "      <td>2.078287e+00</td>\n",
       "      <td>2.082395e+00</td>\n",
       "      <td>2.064813e+00</td>\n",
       "      <td>2.074176e+00</td>\n",
       "      <td>2.068696e+00</td>\n",
       "      <td>2.081123e+00</td>\n",
       "      <td>2.090350e+00</td>\n",
       "      <td>5.102610e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>2.850000e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.794890e+05</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>4.000000e+00</td>\n",
       "      <td>4.000000e+00</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>4.000000e+00</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>...</td>\n",
       "      <td>4.000000e+00</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>4.000000e+00</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>4.700000e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>5.589780e+05</td>\n",
       "      <td>5.000000e+00</td>\n",
       "      <td>5.000000e+00</td>\n",
       "      <td>5.000000e+00</td>\n",
       "      <td>5.000000e+00</td>\n",
       "      <td>5.000000e+00</td>\n",
       "      <td>5.000000e+00</td>\n",
       "      <td>5.000000e+00</td>\n",
       "      <td>5.000000e+00</td>\n",
       "      <td>5.000000e+00</td>\n",
       "      <td>...</td>\n",
       "      <td>5.000000e+00</td>\n",
       "      <td>5.000000e+00</td>\n",
       "      <td>5.000000e+00</td>\n",
       "      <td>5.000000e+00</td>\n",
       "      <td>5.000000e+00</td>\n",
       "      <td>5.000000e+00</td>\n",
       "      <td>5.000000e+00</td>\n",
       "      <td>5.000000e+00</td>\n",
       "      <td>5.000000e+00</td>\n",
       "      <td>5.050000e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>8.384670e+05</td>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>5.400000e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.117956e+06</td>\n",
       "      <td>1.600000e+01</td>\n",
       "      <td>1.800000e+01</td>\n",
       "      <td>1.600000e+01</td>\n",
       "      <td>1.700000e+01</td>\n",
       "      <td>1.700000e+01</td>\n",
       "      <td>1.700000e+01</td>\n",
       "      <td>1.600000e+01</td>\n",
       "      <td>1.600000e+01</td>\n",
       "      <td>1.600000e+01</td>\n",
       "      <td>...</td>\n",
       "      <td>1.700000e+01</td>\n",
       "      <td>1.700000e+01</td>\n",
       "      <td>1.600000e+01</td>\n",
       "      <td>1.600000e+01</td>\n",
       "      <td>1.700000e+01</td>\n",
       "      <td>1.800000e+01</td>\n",
       "      <td>1.900000e+01</td>\n",
       "      <td>1.600000e+01</td>\n",
       "      <td>1.600000e+01</td>\n",
       "      <td>7.250000e-01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows Ã— 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 id  MonsoonIntensity  TopographyDrainage  RiverManagement  \\\n",
       "count  1.117957e+06      1.117957e+06        1.117957e+06     1.117957e+06   \n",
       "mean   5.589780e+05      4.921450e+00        4.926671e+00     4.955322e+00   \n",
       "std    3.227265e+05      2.056387e+00        2.093879e+00     2.072186e+00   \n",
       "min    0.000000e+00      0.000000e+00        0.000000e+00     0.000000e+00   \n",
       "25%    2.794890e+05      3.000000e+00        3.000000e+00     4.000000e+00   \n",
       "50%    5.589780e+05      5.000000e+00        5.000000e+00     5.000000e+00   \n",
       "75%    8.384670e+05      6.000000e+00        6.000000e+00     6.000000e+00   \n",
       "max    1.117956e+06      1.600000e+01        1.800000e+01     1.600000e+01   \n",
       "\n",
       "       Deforestation  Urbanization  ClimateChange   DamsQuality     Siltation  \\\n",
       "count   1.117957e+06  1.117957e+06   1.117957e+06  1.117957e+06  1.117957e+06   \n",
       "mean    4.942240e+00  4.942517e+00   4.934093e+00  4.955878e+00  4.927791e+00   \n",
       "std     2.051689e+00  2.083391e+00   2.057742e+00  2.083063e+00  2.065992e+00   \n",
       "min     0.000000e+00  0.000000e+00   0.000000e+00  0.000000e+00  0.000000e+00   \n",
       "25%     4.000000e+00  3.000000e+00   3.000000e+00  4.000000e+00  3.000000e+00   \n",
       "50%     5.000000e+00  5.000000e+00   5.000000e+00  5.000000e+00  5.000000e+00   \n",
       "75%     6.000000e+00  6.000000e+00   6.000000e+00  6.000000e+00  6.000000e+00   \n",
       "max     1.700000e+01  1.700000e+01   1.700000e+01  1.600000e+01  1.600000e+01   \n",
       "\n",
       "       AgriculturalPractices  ...  DrainageSystems  CoastalVulnerability  \\\n",
       "count           1.117957e+06  ...     1.117957e+06          1.117957e+06   \n",
       "mean            4.942619e+00  ...     4.946893e+00          4.953999e+00   \n",
       "std             2.068545e+00  ...     2.072333e+00          2.088899e+00   \n",
       "min             0.000000e+00  ...     0.000000e+00          0.000000e+00   \n",
       "25%             3.000000e+00  ...     4.000000e+00          3.000000e+00   \n",
       "50%             5.000000e+00  ...     5.000000e+00          5.000000e+00   \n",
       "75%             6.000000e+00  ...     6.000000e+00          6.000000e+00   \n",
       "max             1.600000e+01  ...     1.700000e+01          1.700000e+01   \n",
       "\n",
       "         Landslides    Watersheds  DeterioratingInfrastructure  \\\n",
       "count  1.117957e+06  1.117957e+06                 1.117957e+06   \n",
       "mean   4.931376e+00  4.929032e+00                 4.925907e+00   \n",
       "std    2.078287e+00  2.082395e+00                 2.064813e+00   \n",
       "min    0.000000e+00  0.000000e+00                 0.000000e+00   \n",
       "25%    3.000000e+00  3.000000e+00                 3.000000e+00   \n",
       "50%    5.000000e+00  5.000000e+00                 5.000000e+00   \n",
       "75%    6.000000e+00  6.000000e+00                 6.000000e+00   \n",
       "max    1.600000e+01  1.600000e+01                 1.700000e+01   \n",
       "\n",
       "       PopulationScore   WetlandLoss  InadequatePlanning  PoliticalFactors  \\\n",
       "count     1.117957e+06  1.117957e+06        1.117957e+06      1.117957e+06   \n",
       "mean      4.927520e+00  4.950859e+00        4.940587e+00      4.939004e+00   \n",
       "std       2.074176e+00  2.068696e+00        2.081123e+00      2.090350e+00   \n",
       "min       0.000000e+00  0.000000e+00        0.000000e+00      0.000000e+00   \n",
       "25%       3.000000e+00  4.000000e+00        3.000000e+00      3.000000e+00   \n",
       "50%       5.000000e+00  5.000000e+00        5.000000e+00      5.000000e+00   \n",
       "75%       6.000000e+00  6.000000e+00        6.000000e+00      6.000000e+00   \n",
       "max       1.800000e+01  1.900000e+01        1.600000e+01      1.600000e+01   \n",
       "\n",
       "       FloodProbability  \n",
       "count      1.117957e+06  \n",
       "mean       5.044803e-01  \n",
       "std        5.102610e-02  \n",
       "min        2.850000e-01  \n",
       "25%        4.700000e-01  \n",
       "50%        5.050000e-01  \n",
       "75%        5.400000e-01  \n",
       "max        7.250000e-01  \n",
       "\n",
       "[8 rows x 22 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "846b12c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:35:29.494898Z",
     "iopub.status.busy": "2024-05-16T05:35:29.494496Z",
     "iopub.status.idle": "2024-05-16T05:35:29.525753Z",
     "shell.execute_reply": "2024-05-16T05:35:29.524435Z"
    },
    "papermill": {
     "duration": 0.053778,
     "end_time": "2024-05-16T05:35:29.528461",
     "exception": false,
     "start_time": "2024-05-16T05:35:29.474683",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                                 0\n",
       "MonsoonIntensity                   0\n",
       "TopographyDrainage                 0\n",
       "RiverManagement                    0\n",
       "Deforestation                      0\n",
       "Urbanization                       0\n",
       "ClimateChange                      0\n",
       "DamsQuality                        0\n",
       "Siltation                          0\n",
       "AgriculturalPractices              0\n",
       "Encroachments                      0\n",
       "IneffectiveDisasterPreparedness    0\n",
       "DrainageSystems                    0\n",
       "CoastalVulnerability               0\n",
       "Landslides                         0\n",
       "Watersheds                         0\n",
       "DeterioratingInfrastructure        0\n",
       "PopulationScore                    0\n",
       "WetlandLoss                        0\n",
       "InadequatePlanning                 0\n",
       "PoliticalFactors                   0\n",
       "FloodProbability                   0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7caa97c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:35:29.569249Z",
     "iopub.status.busy": "2024-05-16T05:35:29.568827Z",
     "iopub.status.idle": "2024-05-16T05:35:29.590940Z",
     "shell.execute_reply": "2024-05-16T05:35:29.589662Z"
    },
    "papermill": {
     "duration": 0.045461,
     "end_time": "2024-05-16T05:35:29.593917",
     "exception": false,
     "start_time": "2024-05-16T05:35:29.548456",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                                 0\n",
       "MonsoonIntensity                   0\n",
       "TopographyDrainage                 0\n",
       "RiverManagement                    0\n",
       "Deforestation                      0\n",
       "Urbanization                       0\n",
       "ClimateChange                      0\n",
       "DamsQuality                        0\n",
       "Siltation                          0\n",
       "AgriculturalPractices              0\n",
       "Encroachments                      0\n",
       "IneffectiveDisasterPreparedness    0\n",
       "DrainageSystems                    0\n",
       "CoastalVulnerability               0\n",
       "Landslides                         0\n",
       "Watersheds                         0\n",
       "DeterioratingInfrastructure        0\n",
       "PopulationScore                    0\n",
       "WetlandLoss                        0\n",
       "InadequatePlanning                 0\n",
       "PoliticalFactors                   0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "efe73fcb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:35:29.633976Z",
     "iopub.status.busy": "2024-05-16T05:35:29.633565Z",
     "iopub.status.idle": "2024-05-16T05:35:33.346612Z",
     "shell.execute_reply": "2024-05-16T05:35:33.345268Z"
    },
    "papermill": {
     "duration": 3.737944,
     "end_time": "2024-05-16T05:35:33.350980",
     "exception": false,
     "start_time": "2024-05-16T05:35:29.613036",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x1200 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "correlation_matrix = train_df.corr(numeric_only=True)\n",
    "plt.figure(figsize=(20,12))\n",
    "sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=\".2f\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c1abc10",
   "metadata": {
    "papermill": {
     "duration": 0.022705,
     "end_time": "2024-05-16T05:35:33.397107",
     "exception": false,
     "start_time": "2024-05-16T05:35:33.374402",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "All of our feature columns are relatively evenly correlated to our target (except Id of course)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "882b1596",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:35:33.444753Z",
     "iopub.status.busy": "2024-05-16T05:35:33.444351Z",
     "iopub.status.idle": "2024-05-16T05:35:33.836544Z",
     "shell.execute_reply": "2024-05-16T05:35:33.835424Z"
    },
    "papermill": {
     "duration": 0.418704,
     "end_time": "2024-05-16T05:35:33.838938",
     "exception": false,
     "start_time": "2024-05-16T05:35:33.420234",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MonsoonIntensity</th>\n",
       "      <th>TopographyDrainage</th>\n",
       "      <th>RiverManagement</th>\n",
       "      <th>Deforestation</th>\n",
       "      <th>Urbanization</th>\n",
       "      <th>ClimateChange</th>\n",
       "      <th>DamsQuality</th>\n",
       "      <th>Siltation</th>\n",
       "      <th>AgriculturalPractices</th>\n",
       "      <th>Encroachments</th>\n",
       "      <th>...</th>\n",
       "      <th>DrainageSystems</th>\n",
       "      <th>CoastalVulnerability</th>\n",
       "      <th>Landslides</th>\n",
       "      <th>Watersheds</th>\n",
       "      <th>DeterioratingInfrastructure</th>\n",
       "      <th>PopulationScore</th>\n",
       "      <th>WetlandLoss</th>\n",
       "      <th>InadequatePlanning</th>\n",
       "      <th>PoliticalFactors</th>\n",
       "      <th>FloodProbability</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>0.445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0.450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0.530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>0.535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>0.415</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1117952</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>10</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>10</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>8</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>0.495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1117953</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>9</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>9</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>0.480</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1117954</th>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>0.485</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1117955</th>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>0.495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1117956</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>8</td>\n",
       "      <td>0.560</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1117957 rows Ã— 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         MonsoonIntensity  TopographyDrainage  RiverManagement  Deforestation  \\\n",
       "0                       5                   8                5              8   \n",
       "1                       6                   7                4              4   \n",
       "2                       6                   5                6              7   \n",
       "3                       3                   4                6              5   \n",
       "4                       5                   3                2              6   \n",
       "...                   ...                 ...              ...            ...   \n",
       "1117952                 3                   3                4             10   \n",
       "1117953                 2                   2                4              3   \n",
       "1117954                 7                   3                9              4   \n",
       "1117955                 7                   3                3              7   \n",
       "1117956                 4                   5                6              9   \n",
       "\n",
       "         Urbanization  ClimateChange  DamsQuality  Siltation  \\\n",
       "0                   6              4            4          3   \n",
       "1                   8              8            3          5   \n",
       "2                   3              7            1          5   \n",
       "3                   4              8            4          7   \n",
       "4                   4              4            3          3   \n",
       "...               ...            ...          ...        ...   \n",
       "1117952             4              5            5          7   \n",
       "1117953             9              5            8          1   \n",
       "1117954             6              5            9          1   \n",
       "1117955             5              2            3          4   \n",
       "1117956             5              5            2          8   \n",
       "\n",
       "         AgriculturalPractices  Encroachments  ...  DrainageSystems  \\\n",
       "0                            3              4  ...                5   \n",
       "1                            4              6  ...                7   \n",
       "2                            4              5  ...                7   \n",
       "3                            6              8  ...                2   \n",
       "4                            3              3  ...                2   \n",
       "...                        ...            ...  ...              ...   \n",
       "1117952                     10              4  ...                7   \n",
       "1117953                      3              5  ...                9   \n",
       "1117954                      3              4  ...                5   \n",
       "1117955                      6              4  ...                6   \n",
       "1117956                      4              5  ...                4   \n",
       "\n",
       "         CoastalVulnerability  Landslides  Watersheds  \\\n",
       "0                           3           3           5   \n",
       "1                           2           0           3   \n",
       "2                           3           7           5   \n",
       "3                           4           7           4   \n",
       "4                           2           6           6   \n",
       "...                       ...         ...         ...   \n",
       "1117952                     8           7           2   \n",
       "1117953                     4           4           3   \n",
       "1117954                     5           5           5   \n",
       "1117955                     8           5           3   \n",
       "1117956                     8           6           5   \n",
       "\n",
       "         DeterioratingInfrastructure  PopulationScore  WetlandLoss  \\\n",
       "0                                  4                7            5   \n",
       "1                                  5                3            3   \n",
       "2                                  6                8            2   \n",
       "3                                  4                6            5   \n",
       "4                                  4                1            2   \n",
       "...                              ...              ...          ...   \n",
       "1117952                            2                1            4   \n",
       "1117953                            7                4            9   \n",
       "1117954                            6                5            5   \n",
       "1117955                            4                6            7   \n",
       "1117956                            5                6            7   \n",
       "\n",
       "         InadequatePlanning  PoliticalFactors  FloodProbability  \n",
       "0                         7                 3             0.445  \n",
       "1                         4                 3             0.450  \n",
       "2                         3                 3             0.530  \n",
       "3                         7                 5             0.535  \n",
       "4                         3                 5             0.415  \n",
       "...                     ...               ...               ...  \n",
       "1117952                   6                 4             0.495  \n",
       "1117953                   4                 5             0.480  \n",
       "1117954                   2                 4             0.485  \n",
       "1117955                   6                 4             0.495  \n",
       "1117956                   7                 8             0.560  \n",
       "\n",
       "[1117957 rows x 21 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.drop('id', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "0b492938",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:35:33.887959Z",
     "iopub.status.busy": "2024-05-16T05:35:33.887308Z",
     "iopub.status.idle": "2024-05-16T05:35:35.466288Z",
     "shell.execute_reply": "2024-05-16T05:35:35.465291Z"
    },
    "papermill": {
     "duration": 1.607478,
     "end_time": "2024-05-16T05:35:35.469185",
     "exception": false,
     "start_time": "2024-05-16T05:35:33.861707",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='FloodProbability', ylabel='Count'>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAk0AAAGwCAYAAAC0HlECAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAyxklEQVR4nO3df1wVdb7H8Te/EeQg6gr+SihLJVMS06jdVosko65utle3UjKzX+BVuVnrXtPCNssU7QfpVgptPx6Wu62Vev3RMWtV1CTZ/BVla6ubghUHUUtQmPvHLnM9gjogMIdzXs/HYx6Pzsz3zHzmTBzf5zsz3/EzDMMQAAAAzsnf7gIAAABaAkITAACABYQmAAAACwhNAAAAFhCaAAAALCA0AQAAWEBoAgAAsCDQ7gK8RXV1tQ4ePKiIiAj5+fnZXQ4AALDAMAwdPXpUnTp1kr//ufuSCE2N5ODBg+ratavdZQAAgAY4cOCAunTpcs42hKZGEhERIelfH7rD4bC5GgAAYEV5ebm6du1q/jt+LoSmRlJzSs7hcBCaAABoYaxcWsOF4AAAABYQmgAAACwgNAEAAFhAaAIAALCA0AQAAGABoQkAAMACQhMAAIAFhCYAAAALCE0AAAAWEJoAAAAsIDQBAABYQGgCAACwgNAEAABgAaEJAADAgkC7CwCApmYYhlwulyQpKipKfn5+NlcEoCWipwmA13O5XBqzwKkxC5xmeAKA+qKnCYBPCApz2F0CgBaOniYAAAALCE0AAAAWEJoAAAAsIDQBAABYQGgCAACwgNAEwGcZhqHS0lIZhmF3KQBaAEITAJ/lcrk0as4yxm4CYAmhCYBPCwqLsLsEAC0EoQkAAMACQhMAAIAFhCYAAAALCE0AAAAWEJoAAAAsIDQBQBNiLCjAexCaAHgVTwspjAUFeA9CEwCv0tghpSaEXUgQYywowDsQmgB4ncYMKS6XS2MWODVmgZPeIsDHEZoAtEiN0QNkVVCYQ0FhDkv1eMppQQCNj9AEoEXytB4grl0CvF+g3QUAQEOdr/enuXHtEuDd6GkCgH/jFBuAc/GY0PT000/Lz89PkyZNMuedOHFC6enpateunVq3bq0RI0aopKTE7X379+9XamqqwsLC1KFDB02ZMkWnTp1ya7N+/Xr169dPISEh6t69u/Ly8mptPycnR7GxsQoNDdXAgQO1devWpthNAB6sPqfYCFiA7/GI0PTpp5/qD3/4g/r06eM2f/Lkyfrggw+0dOlSffzxxzp48KBuu+02c3lVVZVSU1NVWVmpTZs26bXXXlNeXp6mT59uttm3b59SU1M1ePBgFRYWatKkSbr33nu1evVqs83bb7+tzMxMzZgxQ5999pn69u2rlJQUHT58uOl3HoBHsXqKjWuYAN9je2g6duyY7rzzTr3yyiuKiooy5x85ckSLFi1Sdna2rr/+eiUmJio3N1ebNm3S5s2bJUlr1qzR7t279cYbbyghIUFDhw7VzJkzlZOTo8rKSknSwoULFRcXp7lz56pXr17KyMjQ7bffrnnz5pnbys7O1vjx4zV27FjFx8dr4cKFCgsL0+LFi5v3wwDQonANE+BbbA9N6enpSk1NVXJystv8goICnTx50m1+z549ddFFFyk/P1+SlJ+fryuuuELR0dFmm5SUFJWXl2vXrl1mmzPXnZKSYq6jsrJSBQUFbm38/f2VnJxstqlLRUWFysvL3SYAAOC9bL17bsmSJfrss8/06aef1lpWXFys4OBgtWnTxm1+dHS0iouLzTanB6aa5TXLztWmvLxcP/30k1wul6qqqups88UXX5y19lmzZumJJ56wtqMAAKDFs62n6cCBA5o4caLefPNNhYaG2lVGg02dOlVHjhwxpwMHDthdEuDVmnMwSwCoi22hqaCgQIcPH1a/fv0UGBiowMBAffzxx3r++ecVGBio6OhoVVZWqqyszO19JSUliomJkSTFxMTUupuu5vX52jgcDrVq1Urt27dXQEBAnW1q1lGXkJAQORwOtwlA0/G0wSwB+B7bQtMNN9ygHTt2qLCw0Jz69++vO++80/zvoKAgOZ1O8z1FRUXav3+/kpKSJElJSUnasWOH211ua9eulcPhUHx8vNnm9HXUtKlZR3BwsBITE93aVFdXy+l0mm0AeAYrjzPxJgxrAHgW265pioiIUO/evd3mhYeHq127dub8cePGKTMzU23btpXD4dCECROUlJSkq6++WpI0ZMgQxcfHa/To0Zo9e7aKi4s1bdo0paenKyQkRJL0wAMP6MUXX9Qjjzyie+65R+vWrdM777yjFStWmNvNzMxUWlqa+vfvrwEDBmj+/Pk6fvy4xo4d20yfBgDUVjOswZKHh6tt27Z2lwP4PI9+jMq8efPk7++vESNGqKKiQikpKXrppZfM5QEBAVq+fLkefPBBJSUlKTw8XGlpacrKyjLbxMXFacWKFZo8ebKee+45denSRa+++qpSUlLMNiNHjtR3332n6dOnq7i4WAkJCVq1alWti8MBoLkxrAHgOTwqNK1fv97tdWhoqHJycpSTk3PW93Tr1k0rV64853oHDRqk7du3n7NNRkaGMjIyLNcKAAB8i+3jNAEAALQEhCYAAAALCE0AAAAWEJoAAAAsIDQBAABYQGgCAACwgNAEAABgAaEJAADAAkITAHgInjUHeDZCEwB4iJpnzblcLrtLAVAHQhMAeBCeNQd4LkITAI/DaSoAnojQBMDjcJoKgCciNAHwSJymAuBpCE0AAAAWEJoAAAAsIDQBAABYQGgCAACwgNAEAABgAaEJAADAgkC7CwAAX2MYhjkGVVRUlPz8/GyuCIAV9DQBQDNzuVwas8CpMQucDOAJtCD0NAGADYLCHHaXAKCe6GkCAACwgNAEAABgAafnAKAF4SJywD70NAFAC8JF5IB96GkCgBaGi8gBe9DTBAAAYAGhCQAAwAJCEwAAgAWEJgAAAAsITQAAABYQmgAAACwgNAEAAFhAaAIAALCA0AQAAGABoQkAAMACQhMAAIAFhCYAAAALCE0AAAAWEJoAAAAsIDQBAABYQGgCAACwgNAEAF7AMAyVlpbKMAy7SwG8FqEJALyAy+XSqDnL5HK57C4F8FqEJgDwEkFhEXaXAHg1QhMAAIAFhCYAAAALCE0AAAAWEJoAAAAsIDQBAABYQGgC0GwYSwhAS0ZoAtBsGEsIQEtGaALQrBhLCEBLRWgCAACwgNAEAABgAaEJAADAAkITANtwNx2AloTQBMA23E0HoCUhNAGwFXfTAWgpCE0AAAAWEJoAAAAsIDQBAABYQGgCAACwgNAEAABgAaEJAADAAkITAACABYQmAAAACwhNAAAAFtgamhYsWKA+ffrI4XDI4XAoKSlJ//u//2suP3HihNLT09WuXTu1bt1aI0aMUElJids69u/fr9TUVIWFhalDhw6aMmWKTp065dZm/fr16tevn0JCQtS9e3fl5eXVqiUnJ0exsbEKDQ3VwIEDtXXr1ibZZwAA0DLZGpq6dOmip59+WgUFBdq2bZuuv/56DRs2TLt27ZIkTZ48WR988IGWLl2qjz/+WAcPHtRtt91mvr+qqkqpqamqrKzUpk2b9NprrykvL0/Tp0832+zbt0+pqakaPHiwCgsLNWnSJN17771avXq12ebtt99WZmamZsyYoc8++0x9+/ZVSkqKDh8+3HwfBgAA8Gi2hqZbb71VN998sy699FJddtll+v3vf6/WrVtr8+bNOnLkiBYtWqTs7Gxdf/31SkxMVG5urjZt2qTNmzdLktasWaPdu3frjTfeUEJCgoYOHaqZM2cqJydHlZWVkqSFCxcqLi5Oc+fOVa9evZSRkaHbb79d8+bNM+vIzs7W+PHjNXbsWMXHx2vhwoUKCwvT4sWLbflcAACA5/GYa5qqqqq0ZMkSHT9+XElJSSooKNDJkyeVnJxstunZs6cuuugi5efnS5Ly8/N1xRVXKDo62myTkpKi8vJys7cqPz/fbR01bWrWUVlZqYKCArc2/v7+Sk5ONtvUpaKiQuXl5W4TAADwXraHph07dqh169YKCQnRAw88oL/85S+Kj49XcXGxgoOD1aZNG7f20dHRKi4uliQVFxe7Baaa5TXLztWmvLxcP/30k77//ntVVVXV2aZmHXWZNWuWIiMjzalr164N2n8AANAy2B6aevToocLCQm3ZskUPPvig0tLStHv3brvLOq+pU6fqyJEj5nTgwAG7SwIAAE0o0O4CgoOD1b17d0lSYmKiPv30Uz333HMaOXKkKisrVVZW5tbbVFJSopiYGElSTExMrbvcau6uO73NmXfclZSUyOFwqFWrVgoICFBAQECdbWrWUZeQkBCFhIQ0bKcBAECLY3tP05mqq6tVUVGhxMREBQUFyel0msuKioq0f/9+JSUlSZKSkpK0Y8cOt7vc1q5dK4fDofj4eLPN6euoaVOzjuDgYCUmJrq1qa6ultPpNNsAAADY2tM0depUDR06VBdddJGOHj2qt956S+vXr9fq1asVGRmpcePGKTMzU23btpXD4dCECROUlJSkq6++WpI0ZMgQxcfHa/To0Zo9e7aKi4s1bdo0paenm71ADzzwgF588UU98sgjuueee7Ru3Tq98847WrFihVlHZmam0tLS1L9/fw0YMEDz58/X8ePHNXbsWFs+FwAA4HlsDU2HDx/WmDFjdOjQIUVGRqpPnz5avXq1brzxRknSvHnz5O/vrxEjRqiiokIpKSl66aWXzPcHBARo+fLlevDBB5WUlKTw8HClpaUpKyvLbBMXF6cVK1Zo8uTJeu6559SlSxe9+uqrSklJMduMHDlS3333naZPn67i4mIlJCRo1apVtS4OBwAAvsvW0LRo0aJzLg8NDVVOTo5ycnLO2qZbt25auXLlOdczaNAgbd++/ZxtMjIylJGRcc42AADAd3ncNU0AAACeiNAEAF7IMAyVlpbKMAy7SwG8BqEJALyQy+XSqDnL5HK57C4F8BqEJgDwUkFhEXaXAHgV2we3BOB9DMMweziioqLk5+dnc0UAcOHoaQLQ6Fwul8YscGrMAienhwB4DXqaADSJoDCH3SUAQKOipwkAAMACQhMAAIAFhCYAAAALCE0AAAAWEJoAAAAsIDQBAABYQGgCAACwgNAEAABgAaEJAADAAkITAACABYQmAAAACwhNAAAAFhCaAAAALCA0AQAAWEBoAnBBDMNQaWmpDMOwuxQAaFKEJgAXxOVyadScZXK5XHaXAgBNitAE4IIFhUXYXQIANDlCEwAAgAWEJgAAAAsITQAAABYE2l0AAKB5GIZhXrAfFRUlPz8/mysCWhZ6mgDAR7hcLo1Z4NSYBU7udgQagJ4mAPAhQWEOu0sAWix6mgAAACwgNAEAAFhAaAIAALCA0AQAAGBBg0LTxRdfrB9++KHW/LKyMl188cUXXBQAAICnaVBo+uabb1RVVVVrfkVFhb799tsLLgoAAMDT1GvIgffff9/879WrVysyMtJ8XVVVJafTqdjY2EYrDgAAwFPUKzQNHz5ckuTn56e0tDS3ZUFBQYqNjdXcuXMbrTgAAABPUa/QVF1dLUmKi4vTp59+qvbt2zdJUQAAAJ6mQSOC79u3r7HrAAAA8GgNfoyK0+mU0+nU4cOHzR6oGosXL77gwgAAADxJg0LTE088oaysLPXv318dO3bkSdkAAMDrNSg0LVy4UHl5eRo9enRj1wMAAOCRGjROU2Vlpa655prGrgUAAMBjNSg03XvvvXrrrbcauxYAAACP1aDTcydOnNDLL7+sDz/8UH369FFQUJDb8uzs7EYpDgAAwFM0KDR9/vnnSkhIkCTt3LnTbRkXhQMAAG/UoND00UcfNXYdAACbGIYhl8ulqKgofvgC59Cga5oAAN7D5XJp1JxlcrlcdpcCeLQG9TQNHjz4nL9G1q1b1+CCAADNLygswu4SAI/XoNBUcz1TjZMnT6qwsFA7d+6s9SBfAAAAb9Cg0DRv3rw65z/++OM6duzYBRUEAADgiRr1mqa77rqL584BAACv1KihKT8/X6GhoY25SgAAAI/QoNNzt912m9trwzB06NAhbdu2TY899lijFAYAAOBJGhSaIiMj3V77+/urR48eysrK0pAhQxqlMAAAAE/SoNCUm5vb2HUAADwMg14C7hoUmmoUFBRoz549kqTLL79cV155ZaMUBQCwX82gl0seHq62bdvaXQ5guwaFpsOHD2vUqFFav3692rRpI0kqKyvT4MGDtWTJEv3sZz9rzBoBADZh0Evg/zXo7rkJEybo6NGj2rVrl0pLS1VaWqqdO3eqvLxc//Vf/9XYNQIAANiuQT1Nq1at0ocffqhevXqZ8+Lj45WTk8OF4AAAwCs1qKepurpaQUFBteYHBQWpurr6gosCAADwNA0KTddff70mTpyogwcPmvO+/fZbTZ48WTfccEOjFQcAAOApGhSaXnzxRZWXlys2NlaXXHKJLrnkEsXFxam8vFwvvPBCY9cIAABguwZd09S1a1d99tln+vDDD/XFF19Iknr16qXk5ORGLQ4AAMBT1Kunad26dYqPj1d5ebn8/Px04403asKECZowYYKuuuoqXX755frrX//aVLUCAADYpl6haf78+Ro/frwcDketZZGRkbr//vuVnZ3daMUBAAB4inqFpr/97W+66aabzrp8yJAhKigouOCiAAAAPE29QlNJSUmdQw3UCAwM1HfffXfBRQEAAHiaeoWmzp07a+fOnWdd/vnnn6tjx44XXBQAz2MYhvkEAMMw7C4HAJpdvULTzTffrMcee0wnTpyoteynn37SjBkzdMsttzRacQA8h8vl0pgFTo1Z4JTL5bK7HABodvUKTdOmTVNpaakuu+wyzZ49W++9957ee+89PfPMM+rRo4dKS0v1P//zP5bXN2vWLF111VWKiIhQhw4dNHz4cBUVFbm1OXHihNLT09WuXTu1bt1aI0aMUElJiVub/fv3KzU1VWFhYerQoYOmTJmiU6dOubVZv369+vXrp5CQEHXv3l15eXm16snJyVFsbKxCQ0M1cOBAbd261fqHA/iAoDCHgsJq3wgCAL6gXqEpOjpamzZtUu/evTV16lT96le/0q9+9Sv97ne/U+/evbVhwwZFR0dbXt/HH3+s9PR0bd68WWvXrtXJkyc1ZMgQHT9+3GwzefJkffDBB1q6dKk+/vhjHTx4ULfddpu5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r71We/fuNX9gSNKXX36pjh07Epga0YX8zSxdulQVFRW66667mrrM5mP3lei4MEuWLDFCQkKMvLw8Y/fu3cZ9991ntGnTxrwlevTo0cZvf/tbs/1TTz1lrFmzxvj666+N3bt3G3PmzDECAwONV155xa5d8Er1PS5n4u65plPfY/PEE08Yq1evNr7++mujoKDAGDVqlBEaGmrs2rXLrl3wSvU9Lvv37zciIiKMjIwMo6ioyFi+fLnRoUMH48knn7RrF7xWQ7/Pfv7znxsjR45s7nKbFKfnWriRI0fqu+++0/Tp01VcXKyEhAStWrXKvGhv//798vf//w7F48eP66GHHtI///lPtWrVSj179tQbb7yhkSNH2rULXqm+xwXNp77HxuVyafz48SouLlZUVJQSExO1adMmxcfH27ULXqm+x6Vr165avXq1Jk+erD59+qhz586aOHGiHn30Ubt2wWs15PusqKhIGzZs0Jo1a+woucn4GYZh2F0EAACAp+OnLgAAgAWEJgAAAAsITQAAABYQmgAAACwgNAEAAFhAaAIAALCA0AQAAGABoQkAAMACQhOAZjNo0CBNmjSpybcTGxur+fPnt4jt5OXlqU2bNuds8/jjjyshIcF8fffdd2v48OHm6+b6XAFfR2gC0Kjuvvtu+fn51Zr27t1rW02xsbFmHeHh4erXr5+WLl1qWz319fDDD7s9MPVM7777rmbOnGm+bq7QCPgaQhOARnfTTTfp0KFDblNcXJytNWVlZenQoUPavn27rrrqKo0cOVKbNm2qs21lZWUzV3durVu3Vrt27c66vG3btoqIiGjGigDfRGgC0OhCQkIUExPjNgUEBNRq53K5NGbMGEVFRSksLExDhw7VV1995dbmz3/+sy6//HKFhIQoNjZWc+fOdVt++PBh3XrrrWrVqpXi4uL05ptv1llTRESEYmJidNlllyknJ0etWrXSBx98IOlfPTMzZ87UmDFj5HA4dN9991natiQdPXpUv/nNbxQeHq7OnTsrJyfHbXl2drauuOIKhYeHq2vXrnrooYd07NixWutZtmyZLr30UoWGhiolJUUHDhwwl515eu5Mp5+eGzRokP7xj39o8uTJZu/a8ePH5XA49Kc//anWNsPDw3X06NGzrhvA/yM0AbDN3XffrW3btun9999Xfn6+DMPQzTffrJMnT0qSCgoK9J//+Z8aNWqUduzYoccff1yPPfaY8vLy3NZx4MABffTRR/rTn/6kl156SYcPHz7ndgMDAxUUFOTWozRnzhz17dtX27dv12OPPWZp25L07LPPmu/77W9/q4kTJ2rt2rXmcn9/fz3//PPatWuXXnvtNa1bt06PPPKI2zp+/PFH/f73v9cf//hHbdy4UWVlZRo1alSDPtN3331XXbp0MXvWDh06pPDwcI0aNUq5ublubXNzc3X77bfTSwVYZQBAI0pLSzMCAgKM8PBwc7r99tsNwzCMX/7yl8bEiRMNwzCML7/80pBkbNy40Xzv999/b7Rq1cp45513DMMwjDvuuMO48cYb3dY/ZcoUIz4+3jAMwygqKjIkGVu3bjWX79mzx5BkzJs3z5zXrVs383VFRYXx1FNPGZKM5cuXm8uHDx/utp3zbbvmfTfddJNbm5EjRxpDhw496+ezdOlSo127dubr3NxcQ5KxefPmWvuwZcsWwzAMY8aMGUbfvn3N5WlpacawYcPM16d/rmfub40tW7YYAQEBxsGDBw3DMIySkhIjMDDQWL9+/VlrBeCOniYAjW7w4MEqLCw0p+eff75Wmz179igwMFADBw4057Vr1049evTQnj17zDbXXnut2/uuvfZaffXVV6qqqjLXkZiYaC7v2bNnnXejPfroo2rdurXCwsL0zDPP6Omnn1Zqaqq5vH///rXqO9e2ayQlJbm1SUpKMuuXpA8//FA33HCDOnfurIiICI0ePVo//PCDfvzxR7NNYGCgrrrqqlr7cPp6LtSAAQN0+eWX67XXXpMkvfHGG+rWrZuuu+66RtsG4O0ITQAaXXh4uLp3725OHTt2tLskTZkyRYWFhfrnP/8pl8ulRx991G15eHh4o2/zm2++0S233KI+ffroz3/+swoKCsxrnuy42Pzee+81Ty/m5uZq7Nix8vPza/Y6gJaK0ATAFr169dKpU6e0ZcsWc94PP/ygoqIixcfHm202btzo9r6NGzfqsssuU0BAgHr27KlTp06poKDAXF5UVKSysrJa22vfvr26d++umJgYS0HhfNuusXnzZrc2mzdvVq9evST965qs6upqzZ07V1dffbUuu+wyHTx4sNa2Tp06pW3bttXah5r11FdwcLBbb1iNu+66S//4xz/0/PPPa/fu3UpLS2vQ+gFfRWgCYItLL71Uw4YN0/jx47Vhwwb97W9/01133aXOnTtr2LBhkqT//u//ltPp1MyZM/Xll1/qtdde04svvqiHH35YktSjRw/ddNNNuv/++7VlyxYVFBTo3nvvVatWrS64vvNtu8bGjRs1e/Zsffnll8rJydHSpUs1ceJESVL37t118uRJvfDCC/r73/+u119/XQsXLqy1raCgIE2YMMHch7vvvltXX321BgwY0KDaY2Nj9cknn+jbb7/V999/b86PiorSbbfdpilTpmjIkCHq0qVLg9YP+CpCEwDb5ObmKjExUbfccouSkpJkGIZWrlypoKAgSVK/fv30zjvvaMmSJerdu7emT5+urKws3X333W7r6NSpk375y1/qtttu03333acOHTpccG1Wti39K1xt27ZNV155pZ588kllZ2crJSVFktS3b19lZ2frmWeeUe/evfXmm29q1qxZtbYVFhamRx99VHfccYeuvfZatW7dWm+//XaDa8/KytI333yjSy65RD/72c/clo0bN06VlZW65557Grx+wFf5GYZh2F0EAKB5vP7665o8ebIOHjyo4OBgu8sBWpRAuwsAADS9H3/8UYcOHdLTTz+t+++/n8AENACn5wDAB8yePVs9e/ZUTEyMpk6danc5QIvE6TkAAAAL6GkCAACwgNAEAABgAaEJAADAAkITAACABYQmAAAACwhNAAAAFhCaAAAALCA0AQAAWPB/VUv8dthPbUsAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.histplot(\n",
    "    train_df,\n",
    "    x=train_df['FloodProbability']\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f88825cd",
   "metadata": {
    "papermill": {
     "duration": 0.023419,
     "end_time": "2024-05-16T05:35:35.516325",
     "exception": false,
     "start_time": "2024-05-16T05:35:35.492906",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Our target variable has a normal distribution of outcomes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c457bdc0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:35:35.567798Z",
     "iopub.status.busy": "2024-05-16T05:35:35.566634Z",
     "iopub.status.idle": "2024-05-16T05:35:35.637052Z",
     "shell.execute_reply": "2024-05-16T05:35:35.635596Z"
    },
    "papermill": {
     "duration": 0.099553,
     "end_time": "2024-05-16T05:35:35.639917",
     "exception": false,
     "start_time": "2024-05-16T05:35:35.540364",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = train_df.drop('FloodProbability', axis=1)\n",
    "y = train_df['FloodProbability']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4925a473",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:35:35.688752Z",
     "iopub.status.busy": "2024-05-16T05:35:35.688296Z",
     "iopub.status.idle": "2024-05-16T05:35:35.694613Z",
     "shell.execute_reply": "2024-05-16T05:35:35.693229Z"
    },
    "papermill": {
     "duration": 0.034048,
     "end_time": "2024-05-16T05:35:35.697402",
     "exception": false,
     "start_time": "2024-05-16T05:35:35.663354",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "sc = StandardScaler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e9f027a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:35:35.746438Z",
     "iopub.status.busy": "2024-05-16T05:35:35.745989Z",
     "iopub.status.idle": "2024-05-16T05:35:36.149936Z",
     "shell.execute_reply": "2024-05-16T05:35:36.148634Z"
    },
    "papermill": {
     "duration": 0.431719,
     "end_time": "2024-05-16T05:35:36.152980",
     "exception": false,
     "start_time": "2024-05-16T05:35:35.721261",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = sc.fit_transform(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d80b54b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:35:36.202517Z",
     "iopub.status.busy": "2024-05-16T05:35:36.202049Z",
     "iopub.status.idle": "2024-05-16T05:35:36.636934Z",
     "shell.execute_reply": "2024-05-16T05:35:36.635653Z"
    },
    "papermill": {
     "duration": 0.463065,
     "end_time": "2024-05-16T05:35:36.639897",
     "exception": false,
     "start_time": "2024-05-16T05:35:36.176832",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b0c545c5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:35:36.690051Z",
     "iopub.status.busy": "2024-05-16T05:35:36.689612Z",
     "iopub.status.idle": "2024-05-16T05:35:36.694804Z",
     "shell.execute_reply": "2024-05-16T05:35:36.693567Z"
    },
    "papermill": {
     "duration": 0.033873,
     "end_time": "2024-05-16T05:35:36.697400",
     "exception": false,
     "start_time": "2024-05-16T05:35:36.663527",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "lr = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "9e798892",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:35:36.746628Z",
     "iopub.status.busy": "2024-05-16T05:35:36.745563Z",
     "iopub.status.idle": "2024-05-16T05:35:37.872240Z",
     "shell.execute_reply": "2024-05-16T05:35:37.870998Z"
    },
    "papermill": {
     "duration": 1.154092,
     "end_time": "2024-05-16T05:35:37.874900",
     "exception": false,
     "start_time": "2024-05-16T05:35:36.720808",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "3bf0ec53",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:35:37.926322Z",
     "iopub.status.busy": "2024-05-16T05:35:37.925862Z",
     "iopub.status.idle": "2024-05-16T05:35:37.945728Z",
     "shell.execute_reply": "2024-05-16T05:35:37.943963Z"
    },
    "papermill": {
     "duration": 0.051724,
     "end_time": "2024-05-16T05:35:37.950893",
     "exception": false,
     "start_time": "2024-05-16T05:35:37.899169",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred_lr = lr.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "14324bff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:35:38.063293Z",
     "iopub.status.busy": "2024-05-16T05:35:38.062851Z",
     "iopub.status.idle": "2024-05-16T05:35:38.074960Z",
     "shell.execute_reply": "2024-05-16T05:35:38.073685Z"
    },
    "papermill": {
     "duration": 0.072674,
     "end_time": "2024-05-16T05:35:38.077510",
     "exception": false,
     "start_time": "2024-05-16T05:35:38.004836",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8447054900348385"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_score(y_test, y_pred_lr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e6a08d60",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:35:38.195228Z",
     "iopub.status.busy": "2024-05-16T05:35:38.194268Z",
     "iopub.status.idle": "2024-05-16T05:35:38.199896Z",
     "shell.execute_reply": "2024-05-16T05:35:38.198815Z"
    },
    "papermill": {
     "duration": 0.035754,
     "end_time": "2024-05-16T05:35:38.202522",
     "exception": false,
     "start_time": "2024-05-16T05:35:38.166768",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "ridge = Ridge()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "46a42ca4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:35:38.254462Z",
     "iopub.status.busy": "2024-05-16T05:35:38.253976Z",
     "iopub.status.idle": "2024-05-16T05:35:38.259749Z",
     "shell.execute_reply": "2024-05-16T05:35:38.258430Z"
    },
    "papermill": {
     "duration": 0.035183,
     "end_time": "2024-05-16T05:35:38.262391",
     "exception": false,
     "start_time": "2024-05-16T05:35:38.227208",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "param_grid_ridge = {\n",
    "    'alpha': [0.001, 0.01, 0.1, 0.5],\n",
    "    'solver': ['auto', 'svd', 'cholesky', 'lsqr', 'sparse_cg', 'sag']\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "2d545823",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:35:38.313473Z",
     "iopub.status.busy": "2024-05-16T05:35:38.312637Z",
     "iopub.status.idle": "2024-05-16T05:35:38.318596Z",
     "shell.execute_reply": "2024-05-16T05:35:38.317456Z"
    },
    "papermill": {
     "duration": 0.034899,
     "end_time": "2024-05-16T05:35:38.321353",
     "exception": false,
     "start_time": "2024-05-16T05:35:38.286454",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "ridge_cv = GridSearchCV(ridge, param_grid_ridge, cv=5, scoring='r2', n_jobs=-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "ce338ca6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:35:38.374921Z",
     "iopub.status.busy": "2024-05-16T05:35:38.374012Z",
     "iopub.status.idle": "2024-05-16T05:38:00.993047Z",
     "shell.execute_reply": "2024-05-16T05:38:00.990759Z"
    },
    "papermill": {
     "duration": 142.699733,
     "end_time": "2024-05-16T05:38:01.045357",
     "exception": false,
     "start_time": "2024-05-16T05:35:38.345624",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=Ridge(), n_jobs=-1,\n",
       "             param_grid={&#x27;alpha&#x27;: [0.001, 0.01, 0.1, 0.5],\n",
       "                         &#x27;solver&#x27;: [&#x27;auto&#x27;, &#x27;svd&#x27;, &#x27;cholesky&#x27;, &#x27;lsqr&#x27;,\n",
       "                                    &#x27;sparse_cg&#x27;, &#x27;sag&#x27;]},\n",
       "             scoring=&#x27;r2&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5, estimator=Ridge(), n_jobs=-1,\n",
       "             param_grid={&#x27;alpha&#x27;: [0.001, 0.01, 0.1, 0.5],\n",
       "                         &#x27;solver&#x27;: [&#x27;auto&#x27;, &#x27;svd&#x27;, &#x27;cholesky&#x27;, &#x27;lsqr&#x27;,\n",
       "                                    &#x27;sparse_cg&#x27;, &#x27;sag&#x27;]},\n",
       "             scoring=&#x27;r2&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: Ridge</label><div class=\"sk-toggleable__content\"><pre>Ridge()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Ridge</label><div class=\"sk-toggleable__content\"><pre>Ridge()</pre></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "GridSearchCV(cv=5, estimator=Ridge(), n_jobs=-1,\n",
       "             param_grid={'alpha': [0.001, 0.01, 0.1, 0.5],\n",
       "                         'solver': ['auto', 'svd', 'cholesky', 'lsqr',\n",
       "                                    'sparse_cg', 'sag']},\n",
       "             scoring='r2')"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ridge_cv.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "db2de259",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:38:01.113889Z",
     "iopub.status.busy": "2024-05-16T05:38:01.113447Z",
     "iopub.status.idle": "2024-05-16T05:38:01.121895Z",
     "shell.execute_reply": "2024-05-16T05:38:01.120502Z"
    },
    "papermill": {
     "duration": 0.037571,
     "end_time": "2024-05-16T05:38:01.124442",
     "exception": false,
     "start_time": "2024-05-16T05:38:01.086871",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Score:  0.8450216266940064\n"
     ]
    }
   ],
   "source": [
    "print('Best Score: ', ridge_cv.best_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "8f7bdcb9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:38:01.175420Z",
     "iopub.status.busy": "2024-05-16T05:38:01.174521Z",
     "iopub.status.idle": "2024-05-16T05:38:01.181782Z",
     "shell.execute_reply": "2024-05-16T05:38:01.180257Z"
    },
    "papermill": {
     "duration": 0.035259,
     "end_time": "2024-05-16T05:38:01.184187",
     "exception": false,
     "start_time": "2024-05-16T05:38:01.148928",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Parameters:  {'alpha': 0.5, 'solver': 'auto'}\n"
     ]
    }
   ],
   "source": [
    "print('Best Parameters: ', ridge_cv.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "76b14684",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:38:01.235664Z",
     "iopub.status.busy": "2024-05-16T05:38:01.234367Z",
     "iopub.status.idle": "2024-05-16T05:38:01.239438Z",
     "shell.execute_reply": "2024-05-16T05:38:01.238571Z"
    },
    "papermill": {
     "duration": 0.033192,
     "end_time": "2024-05-16T05:38:01.241877",
     "exception": false,
     "start_time": "2024-05-16T05:38:01.208685",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "lasso = Lasso()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "a3046b31",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:38:01.293801Z",
     "iopub.status.busy": "2024-05-16T05:38:01.292584Z",
     "iopub.status.idle": "2024-05-16T05:38:01.297871Z",
     "shell.execute_reply": "2024-05-16T05:38:01.296949Z"
    },
    "papermill": {
     "duration": 0.033265,
     "end_time": "2024-05-16T05:38:01.300143",
     "exception": false,
     "start_time": "2024-05-16T05:38:01.266878",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "param_grid_lasso = {\n",
    "    'alpha': [0.001, 0.01, 0.1, 0.5]\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "fd10730e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:38:01.351351Z",
     "iopub.status.busy": "2024-05-16T05:38:01.350069Z",
     "iopub.status.idle": "2024-05-16T05:38:01.356797Z",
     "shell.execute_reply": "2024-05-16T05:38:01.355574Z"
    },
    "papermill": {
     "duration": 0.03499,
     "end_time": "2024-05-16T05:38:01.359480",
     "exception": false,
     "start_time": "2024-05-16T05:38:01.324490",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "lasso_cv = GridSearchCV(lasso, param_grid_lasso, cv=5, scoring='r2', n_jobs=-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "9ec6847f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:38:01.410097Z",
     "iopub.status.busy": "2024-05-16T05:38:01.409690Z",
     "iopub.status.idle": "2024-05-16T05:38:06.021803Z",
     "shell.execute_reply": "2024-05-16T05:38:06.020275Z"
    },
    "papermill": {
     "duration": 4.64222,
     "end_time": "2024-05-16T05:38:06.026129",
     "exception": false,
     "start_time": "2024-05-16T05:38:01.383909",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=Lasso(), n_jobs=-1,\n",
       "             param_grid={&#x27;alpha&#x27;: [0.001, 0.01, 0.1, 0.5]}, scoring=&#x27;r2&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5, estimator=Lasso(), n_jobs=-1,\n",
       "             param_grid={&#x27;alpha&#x27;: [0.001, 0.01, 0.1, 0.5]}, scoring=&#x27;r2&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: Lasso</label><div class=\"sk-toggleable__content\"><pre>Lasso()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Lasso</label><div class=\"sk-toggleable__content\"><pre>Lasso()</pre></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "GridSearchCV(cv=5, estimator=Lasso(), n_jobs=-1,\n",
       "             param_grid={'alpha': [0.001, 0.01, 0.1, 0.5]}, scoring='r2')"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lasso_cv.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "16ae7924",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:38:06.135298Z",
     "iopub.status.busy": "2024-05-16T05:38:06.134823Z",
     "iopub.status.idle": "2024-05-16T05:38:06.139911Z",
     "shell.execute_reply": "2024-05-16T05:38:06.139152Z"
    },
    "papermill": {
     "duration": 0.060569,
     "end_time": "2024-05-16T05:38:06.142641",
     "exception": false,
     "start_time": "2024-05-16T05:38:06.082072",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Score:  0.8354488691874498\n"
     ]
    }
   ],
   "source": [
    "print('Best Score: ', lasso_cv.best_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "82e7a52a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:38:06.196263Z",
     "iopub.status.busy": "2024-05-16T05:38:06.195460Z",
     "iopub.status.idle": "2024-05-16T05:38:06.201413Z",
     "shell.execute_reply": "2024-05-16T05:38:06.200185Z"
    },
    "papermill": {
     "duration": 0.035569,
     "end_time": "2024-05-16T05:38:06.203722",
     "exception": false,
     "start_time": "2024-05-16T05:38:06.168153",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Parameters:  {'alpha': 0.001}\n"
     ]
    }
   ],
   "source": [
    "print('Best Parameters: ', lasso_cv.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "e44c2660",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:38:06.256609Z",
     "iopub.status.busy": "2024-05-16T05:38:06.255683Z",
     "iopub.status.idle": "2024-05-16T05:38:06.261548Z",
     "shell.execute_reply": "2024-05-16T05:38:06.260416Z"
    },
    "papermill": {
     "duration": 0.035835,
     "end_time": "2024-05-16T05:38:06.264588",
     "exception": false,
     "start_time": "2024-05-16T05:38:06.228753",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "svr = LinearSVR()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "22ebef7c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:38:06.317752Z",
     "iopub.status.busy": "2024-05-16T05:38:06.317284Z",
     "iopub.status.idle": "2024-05-16T05:45:02.396924Z",
     "shell.execute_reply": "2024-05-16T05:45:02.395821Z"
    },
    "papermill": {
     "duration": 416.136485,
     "end_time": "2024-05-16T05:45:02.427423",
     "exception": false,
     "start_time": "2024-05-16T05:38:06.290938",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearSVR()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" checked><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearSVR</label><div class=\"sk-toggleable__content\"><pre>LinearSVR()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearSVR()"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svr.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "1a425d07",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:45:02.479571Z",
     "iopub.status.busy": "2024-05-16T05:45:02.479098Z",
     "iopub.status.idle": "2024-05-16T05:45:02.496071Z",
     "shell.execute_reply": "2024-05-16T05:45:02.494824Z"
    },
    "papermill": {
     "duration": 0.047649,
     "end_time": "2024-05-16T05:45:02.500302",
     "exception": false,
     "start_time": "2024-05-16T05:45:02.452653",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred_svr = svr.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "a95c2429",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:45:02.596063Z",
     "iopub.status.busy": "2024-05-16T05:45:02.595386Z",
     "iopub.status.idle": "2024-05-16T05:45:02.611027Z",
     "shell.execute_reply": "2024-05-16T05:45:02.609766Z"
    },
    "papermill": {
     "duration": 0.075048,
     "end_time": "2024-05-16T05:45:02.614731",
     "exception": false,
     "start_time": "2024-05-16T05:45:02.539683",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.781270730230778"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_score(y_test, y_pred_svr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "7561b626",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:45:02.667681Z",
     "iopub.status.busy": "2024-05-16T05:45:02.667292Z",
     "iopub.status.idle": "2024-05-16T05:45:02.672831Z",
     "shell.execute_reply": "2024-05-16T05:45:02.671661Z"
    },
    "papermill": {
     "duration": 0.035149,
     "end_time": "2024-05-16T05:45:02.675398",
     "exception": false,
     "start_time": "2024-05-16T05:45:02.640249",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "sgd = SGDRegressor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "f322892d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:45:02.729354Z",
     "iopub.status.busy": "2024-05-16T05:45:02.728928Z",
     "iopub.status.idle": "2024-05-16T05:45:04.125098Z",
     "shell.execute_reply": "2024-05-16T05:45:04.123933Z"
    },
    "papermill": {
     "duration": 1.426591,
     "end_time": "2024-05-16T05:45:04.127581",
     "exception": false,
     "start_time": "2024-05-16T05:45:02.700990",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SGDRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" checked><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SGDRegressor</label><div class=\"sk-toggleable__content\"><pre>SGDRegressor()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "SGDRegressor()"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sgd.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "141b6457",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:45:04.181401Z",
     "iopub.status.busy": "2024-05-16T05:45:04.180196Z",
     "iopub.status.idle": "2024-05-16T05:45:04.199282Z",
     "shell.execute_reply": "2024-05-16T05:45:04.197651Z"
    },
    "papermill": {
     "duration": 0.049338,
     "end_time": "2024-05-16T05:45:04.202497",
     "exception": false,
     "start_time": "2024-05-16T05:45:04.153159",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred_sgd = sgd.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "963b26d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:45:04.306092Z",
     "iopub.status.busy": "2024-05-16T05:45:04.305173Z",
     "iopub.status.idle": "2024-05-16T05:45:04.320366Z",
     "shell.execute_reply": "2024-05-16T05:45:04.319017Z"
    },
    "papermill": {
     "duration": 0.073903,
     "end_time": "2024-05-16T05:45:04.322930",
     "exception": false,
     "start_time": "2024-05-16T05:45:04.249027",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8445389257558648"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_score(y_test, y_pred_sgd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "3a4e2452",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:45:04.377586Z",
     "iopub.status.busy": "2024-05-16T05:45:04.376451Z",
     "iopub.status.idle": "2024-05-16T05:45:04.843402Z",
     "shell.execute_reply": "2024-05-16T05:45:04.841895Z"
    },
    "papermill": {
     "duration": 0.49775,
     "end_time": "2024-05-16T05:45:04.846697",
     "exception": false,
     "start_time": "2024-05-16T05:45:04.348947",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from catboost import CatBoostRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "5eb0f296",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:45:04.901712Z",
     "iopub.status.busy": "2024-05-16T05:45:04.901244Z",
     "iopub.status.idle": "2024-05-16T05:45:04.910646Z",
     "shell.execute_reply": "2024-05-16T05:45:04.909563Z"
    },
    "papermill": {
     "duration": 0.040469,
     "end_time": "2024-05-16T05:45:04.913024",
     "exception": false,
     "start_time": "2024-05-16T05:45:04.872555",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "cat_boost = CatBoostRegressor(verbose=1000, iterations=2000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "91d7f434",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:45:04.969232Z",
     "iopub.status.busy": "2024-05-16T05:45:04.968337Z",
     "iopub.status.idle": "2024-05-16T05:48:12.742355Z",
     "shell.execute_reply": "2024-05-16T05:48:12.741218Z"
    },
    "papermill": {
     "duration": 187.830318,
     "end_time": "2024-05-16T05:48:12.769479",
     "exception": false,
     "start_time": "2024-05-16T05:45:04.939161",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Learning rate set to 0.067508\n",
      "0:\tlearn: 0.0505503\ttotal: 209ms\tremaining: 6m 57s\n",
      "1000:\tlearn: 0.0199273\ttotal: 1m 27s\tremaining: 1m 27s\n",
      "1999:\tlearn: 0.0197712\ttotal: 2m 56s\tremaining: 0us\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<catboost.core.CatBoostRegressor at 0x7814bc321900>"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cat_boost.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "063213e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:48:12.824390Z",
     "iopub.status.busy": "2024-05-16T05:48:12.823944Z",
     "iopub.status.idle": "2024-05-16T05:48:12.829893Z",
     "shell.execute_reply": "2024-05-16T05:48:12.828698Z"
    },
    "papermill": {
     "duration": 0.036138,
     "end_time": "2024-05-16T05:48:12.832276",
     "exception": false,
     "start_time": "2024-05-16T05:48:12.796138",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "vr = VotingRegressor([('lr', LinearRegression()),\n",
    "                      ('cat', cat_boost),\n",
    "                     ('ridge', ridge_cv.best_estimator_)],\n",
    "                    weights=[2,3,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "bf906f79",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:48:12.887348Z",
     "iopub.status.busy": "2024-05-16T05:48:12.886905Z",
     "iopub.status.idle": "2024-05-16T05:51:22.256958Z",
     "shell.execute_reply": "2024-05-16T05:51:22.254744Z"
    },
    "papermill": {
     "duration": 189.423019,
     "end_time": "2024-05-16T05:51:22.281471",
     "exception": false,
     "start_time": "2024-05-16T05:48:12.858452",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Learning rate set to 0.067508\n",
      "0:\tlearn: 0.0505503\ttotal: 141ms\tremaining: 4m 41s\n",
      "1000:\tlearn: 0.0199273\ttotal: 1m 27s\tremaining: 1m 27s\n",
      "1999:\tlearn: 0.0197712\ttotal: 2m 57s\tremaining: 0us\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-6 {color: black;background-color: white;}#sk-container-id-6 pre{padding: 0;}#sk-container-id-6 div.sk-toggleable {background-color: white;}#sk-container-id-6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-6 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-6 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-6 div.sk-item {position: relative;z-index: 1;}#sk-container-id-6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-6 div.sk-item::before, #sk-container-id-6 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-6 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-6 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-6 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-6 div.sk-label-container {text-align: center;}#sk-container-id-6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-6 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>VotingRegressor(estimators=[(&#x27;lr&#x27;, LinearRegression()),\n",
       "                            (&#x27;cat&#x27;,\n",
       "                             &lt;catboost.core.CatBoostRegressor object at 0x7814bc321900&gt;),\n",
       "                            (&#x27;ridge&#x27;, Ridge(alpha=0.5))],\n",
       "                weights=[2, 3, 1])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">VotingRegressor</label><div class=\"sk-toggleable__content\"><pre>VotingRegressor(estimators=[(&#x27;lr&#x27;, LinearRegression()),\n",
       "                            (&#x27;cat&#x27;,\n",
       "                             &lt;catboost.core.CatBoostRegressor object at 0x7814bc321900&gt;),\n",
       "                            (&#x27;ridge&#x27;, Ridge(alpha=0.5))],\n",
       "                weights=[2, 3, 1])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>lr</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>cat</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">CatBoostRegressor</label><div class=\"sk-toggleable__content\"><pre>&lt;catboost.core.CatBoostRegressor object at 0x7814bc321900&gt;</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>ridge</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" ><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Ridge</label><div class=\"sk-toggleable__content\"><pre>Ridge(alpha=0.5)</pre></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "VotingRegressor(estimators=[('lr', LinearRegression()),\n",
       "                            ('cat',\n",
       "                             <catboost.core.CatBoostRegressor object at 0x7814bc321900>),\n",
       "                            ('ridge', Ridge(alpha=0.5))],\n",
       "                weights=[2, 3, 1])"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vr.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "f417870b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:51:22.370232Z",
     "iopub.status.busy": "2024-05-16T05:51:22.369802Z",
     "iopub.status.idle": "2024-05-16T05:51:26.001443Z",
     "shell.execute_reply": "2024-05-16T05:51:25.999818Z"
    },
    "papermill": {
     "duration": 3.665891,
     "end_time": "2024-05-16T05:51:26.005931",
     "exception": false,
     "start_time": "2024-05-16T05:51:22.340040",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred_vr = vr.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "8709953e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:51:26.118448Z",
     "iopub.status.busy": "2024-05-16T05:51:26.117838Z",
     "iopub.status.idle": "2024-05-16T05:51:26.131099Z",
     "shell.execute_reply": "2024-05-16T05:51:26.129669Z"
    },
    "papermill": {
     "duration": 0.068988,
     "end_time": "2024-05-16T05:51:26.134246",
     "exception": false,
     "start_time": "2024-05-16T05:51:26.065258",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.845830633512059"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_score(y_test, y_pred_vr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "94e895f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:51:26.191482Z",
     "iopub.status.busy": "2024-05-16T05:51:26.191027Z",
     "iopub.status.idle": "2024-05-16T05:51:26.197083Z",
     "shell.execute_reply": "2024-05-16T05:51:26.195807Z"
    },
    "papermill": {
     "duration": 0.038205,
     "end_time": "2024-05-16T05:51:26.200160",
     "exception": false,
     "start_time": "2024-05-16T05:51:26.161955",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "estimators = [\n",
    "    ('lasso', lasso_cv.best_estimator_),\n",
    "    ('ridge', ridge_cv.best_estimator_),\n",
    "    ('sgd', sgd)\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "3ed6ac35",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:51:26.258053Z",
     "iopub.status.busy": "2024-05-16T05:51:26.257648Z",
     "iopub.status.idle": "2024-05-16T05:51:26.263059Z",
     "shell.execute_reply": "2024-05-16T05:51:26.261918Z"
    },
    "papermill": {
     "duration": 0.036744,
     "end_time": "2024-05-16T05:51:26.265688",
     "exception": false,
     "start_time": "2024-05-16T05:51:26.228944",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "stackreg = StackingRegressor(estimators=estimators, final_estimator=vr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "d32fbce3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:51:26.328797Z",
     "iopub.status.busy": "2024-05-16T05:51:26.328401Z",
     "iopub.status.idle": "2024-05-16T05:53:37.663384Z",
     "shell.execute_reply": "2024-05-16T05:53:37.661562Z"
    },
    "papermill": {
     "duration": 131.417035,
     "end_time": "2024-05-16T05:53:37.716486",
     "exception": false,
     "start_time": "2024-05-16T05:51:26.299451",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Learning rate set to 0.067508\n",
      "0:\tlearn: 0.0482159\ttotal: 68.9ms\tremaining: 2m 17s\n",
      "1000:\tlearn: 0.0187815\ttotal: 57.9s\tremaining: 57.8s\n",
      "1999:\tlearn: 0.0187564\ttotal: 1m 56s\tremaining: 0us\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-7 {color: black;background-color: white;}#sk-container-id-7 pre{padding: 0;}#sk-container-id-7 div.sk-toggleable {background-color: white;}#sk-container-id-7 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-7 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-7 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-7 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-7 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-7 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-7 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-7 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-7 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-7 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-7 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-7 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-7 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-7 div.sk-item {position: relative;z-index: 1;}#sk-container-id-7 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-7 div.sk-item::before, #sk-container-id-7 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-7 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-7 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-7 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-7 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-7 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-7 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-7 div.sk-label-container {text-align: center;}#sk-container-id-7 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-7 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-7\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>StackingRegressor(estimators=[(&#x27;lasso&#x27;, Lasso(alpha=0.001)),\n",
       "                              (&#x27;ridge&#x27;, Ridge(alpha=0.5)),\n",
       "                              (&#x27;sgd&#x27;, SGDRegressor())],\n",
       "                  final_estimator=VotingRegressor(estimators=[(&#x27;lr&#x27;,\n",
       "                                                               LinearRegression()),\n",
       "                                                              (&#x27;cat&#x27;,\n",
       "                                                               &lt;catboost.core.CatBoostRegressor object at 0x7814bc321900&gt;),\n",
       "                                                              (&#x27;ridge&#x27;,\n",
       "                                                               Ridge(alpha=0.5))],\n",
       "                                                  weights=[2, 3, 1]))</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-14\" type=\"checkbox\" ><label for=\"sk-estimator-id-14\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StackingRegressor</label><div class=\"sk-toggleable__content\"><pre>StackingRegressor(estimators=[(&#x27;lasso&#x27;, Lasso(alpha=0.001)),\n",
       "                              (&#x27;ridge&#x27;, Ridge(alpha=0.5)),\n",
       "                              (&#x27;sgd&#x27;, SGDRegressor())],\n",
       "                  final_estimator=VotingRegressor(estimators=[(&#x27;lr&#x27;,\n",
       "                                                               LinearRegression()),\n",
       "                                                              (&#x27;cat&#x27;,\n",
       "                                                               &lt;catboost.core.CatBoostRegressor object at 0x7814bc321900&gt;),\n",
       "                                                              (&#x27;ridge&#x27;,\n",
       "                                                               Ridge(alpha=0.5))],\n",
       "                                                  weights=[2, 3, 1]))</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>lasso</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-15\" type=\"checkbox\" ><label for=\"sk-estimator-id-15\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Lasso</label><div class=\"sk-toggleable__content\"><pre>Lasso(alpha=0.001)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>ridge</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-16\" type=\"checkbox\" ><label for=\"sk-estimator-id-16\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Ridge</label><div class=\"sk-toggleable__content\"><pre>Ridge(alpha=0.5)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>sgd</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-17\" type=\"checkbox\" ><label for=\"sk-estimator-id-17\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SGDRegressor</label><div class=\"sk-toggleable__content\"><pre>SGDRegressor()</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>final_estimator</label></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>lr</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-18\" type=\"checkbox\" ><label for=\"sk-estimator-id-18\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>cat</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-19\" type=\"checkbox\" ><label for=\"sk-estimator-id-19\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">CatBoostRegressor</label><div class=\"sk-toggleable__content\"><pre>&lt;catboost.core.CatBoostRegressor object at 0x7814bc321900&gt;</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>ridge</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-20\" type=\"checkbox\" ><label for=\"sk-estimator-id-20\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Ridge</label><div class=\"sk-toggleable__content\"><pre>Ridge(alpha=0.5)</pre></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "StackingRegressor(estimators=[('lasso', Lasso(alpha=0.001)),\n",
       "                              ('ridge', Ridge(alpha=0.5)),\n",
       "                              ('sgd', SGDRegressor())],\n",
       "                  final_estimator=VotingRegressor(estimators=[('lr',\n",
       "                                                               LinearRegression()),\n",
       "                                                              ('cat',\n",
       "                                                               <catboost.core.CatBoostRegressor object at 0x7814bc321900>),\n",
       "                                                              ('ridge',\n",
       "                                                               Ridge(alpha=0.5))],\n",
       "                                                  weights=[2, 3, 1]))"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stackreg.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "66b52c5c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:53:37.775006Z",
     "iopub.status.busy": "2024-05-16T05:53:37.774595Z",
     "iopub.status.idle": "2024-05-16T05:53:38.719135Z",
     "shell.execute_reply": "2024-05-16T05:53:38.717040Z"
    },
    "papermill": {
     "duration": 0.979815,
     "end_time": "2024-05-16T05:53:38.724496",
     "exception": false,
     "start_time": "2024-05-16T05:53:37.744681",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred_stack = stackreg.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "336883bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:53:38.837179Z",
     "iopub.status.busy": "2024-05-16T05:53:38.836768Z",
     "iopub.status.idle": "2024-05-16T05:53:38.847465Z",
     "shell.execute_reply": "2024-05-16T05:53:38.846158Z"
    },
    "papermill": {
     "duration": 0.063006,
     "end_time": "2024-05-16T05:53:38.849960",
     "exception": false,
     "start_time": "2024-05-16T05:53:38.786954",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8595833662590561"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_score(y_test, y_pred_stack)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "793e869b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:53:38.908651Z",
     "iopub.status.busy": "2024-05-16T05:53:38.908252Z",
     "iopub.status.idle": "2024-05-16T05:53:38.993874Z",
     "shell.execute_reply": "2024-05-16T05:53:38.992703Z"
    },
    "papermill": {
     "duration": 0.118597,
     "end_time": "2024-05-16T05:53:38.996935",
     "exception": false,
     "start_time": "2024-05-16T05:53:38.878338",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "x_test_transformed = sc.transform(test_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "05641fbe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:53:39.055925Z",
     "iopub.status.busy": "2024-05-16T05:53:39.055531Z",
     "iopub.status.idle": "2024-05-16T05:53:44.073341Z",
     "shell.execute_reply": "2024-05-16T05:53:44.072251Z"
    },
    "papermill": {
     "duration": 5.05058,
     "end_time": "2024-05-16T05:53:44.076459",
     "exception": false,
     "start_time": "2024-05-16T05:53:39.025879",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_18/544152204.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_y_stacking_out['FloodProbability'] = y_stacking\n"
     ]
    }
   ],
   "source": [
    "y_stacking = (stackreg.predict(x_test_transformed))\n",
    "\n",
    "df_y_stacking_out = test_df[['id']]\n",
    "df_y_stacking_out['FloodProbability'] = y_stacking\n",
    "\n",
    "df_y_stacking_out.to_csv('submission.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "921fbab5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T05:53:44.138649Z",
     "iopub.status.busy": "2024-05-16T05:53:44.137527Z",
     "iopub.status.idle": "2024-05-16T05:53:44.150576Z",
     "shell.execute_reply": "2024-05-16T05:53:44.149202Z"
    },
    "papermill": {
     "duration": 0.046998,
     "end_time": "2024-05-16T05:53:44.153159",
     "exception": false,
     "start_time": "2024-05-16T05:53:44.106161",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>FloodProbability</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1117957</td>\n",
       "      <td>0.575171</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1117958</td>\n",
       "      <td>0.452738</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1117959</td>\n",
       "      <td>0.453013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1117960</td>\n",
       "      <td>0.468723</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1117961</td>\n",
       "      <td>0.468267</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        id  FloodProbability\n",
       "0  1117957          0.575171\n",
       "1  1117958          0.452738\n",
       "2  1117959          0.453013\n",
       "3  1117960          0.468723\n",
       "4  1117961          0.468267"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_y_stacking_out.head()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 8121328,
     "sourceId": 73278,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1109.59492,
   "end_time": "2024-05-16T05:53:46.908294",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-16T05:35:17.313374",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
